---
title: "Midterm Solution: Part 2"
subtitle: Solution
author: "Satish G. Iyengar"
format: html
editor: visual
---

Simulate mean detector runs for the following signal detection in noise problem:

```{=tex}
\begin{eqnarray}
H_0: x(n) & = & w(n), n = 1, 2, \ldots, 10 \\
H_1: x(n) & = & -1.5 + w(n), n = 1, 2, \ldots, 10,
\end{eqnarray}
```
where $w(n) = {w(1), w(2), ..., w(10)}$ are realizations of a normal distribution with zero mean and variance 2.5.

Plot Receiver operating characteristic curve to assess the performance of this detector. Recommend the value of the detector threshold if probability of false alarm cannot be higher than 0.1.

## Solution

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(ggplot2)
library(patchwork)

```

### DC signal

```{r}
# Signal model
A <- -1.5
k <- 10

s <- rep(A, k)
dat <- data.frame('n' = seq(1, k), 's' = s)
```

```{r}
ylimits <- c(-5,5)
p1 <- ggplot(dat, aes(x=n, y = 0)) + geom_line(linewidth = 2) + ylim(ylimits) + 
  ylab('x(n)') + xlab('n') + ggtitle('H0: No signal')

p2 <- ggplot(dat, aes(x=n, y = A)) + geom_line(linewidth = 2) + ylim(ylimits) + 
  ylab('x(n)') + xlab('n') + ggtitle('H1: Signal present')

p1 + p2

```

### Signal contaminated by noise

```{r}
# Noise model: W ~ N(0, 1)
mu_w <- 0
var_w <- 2.5
sd_w <- sqrt(var_w)

set.seed(123)
w <- rnorm(k, mean = mu_w, sd = sd_w)

dat <- dat %>% bind_cols('w' = w)

# Signal + noise
x <- s + rnorm(k, mean = mu_w, sd = sd_w)
dat <- dat %>% bind_cols('x' = x)

```

```{r}
p1 <- ggplot(dat, aes(x=n, y = w)) + geom_line() + ylim(ylimits) +
  ylab('')
#+
#  ggtitle("H0: Noise only")
p2 <- ggplot(dat, aes(x=n, y = x)) + geom_line() + ylim(ylimits) +
  ylab('')
#+ 
 # ggtitle("H1: Signal + Noise")
p1 + p2

```

### 

```{r}
dat %>% select(w, x) %>% colMeans()

```

```{r}
dat <- dat %>% 
  bind_cols('mean_w' = dat %>% pull(w) %>% mean()) %>%
  bind_cols('mean_x' = dat %>% pull(x) %>% mean())

```

```{r}
p1 <- p1 + geom_hline(yintercept = dat %>% pull(w) %>% mean(),
                      linetype = 'dashed', col = "blue") +
  ggtitle(paste0("H0: Noise only, ", 'mean =', 
                   dat %>% pull(w) %>% mean() %>%
                   round(., digits = 3))) +
  ylim(ylimits) 

p2 <- p2 + geom_hline(yintercept = dat %>% pull(x) %>% mean(),
                      linetype = 'dashed', col = "red") +
  ggtitle(paste0("H0: Signal + Noise, ", 'mean =', 
                   dat %>% pull(x) %>% mean() %>%
                   round(., digits = 3))) +
  ylim(ylimits) 

p1 + p2

```

## Detector Logic

Reject the null hypothesis $H_0$ of no signal present if,

$$
T(x_1, x_2, \ldots, x_k) = \bar{X} = \frac{1}{k}\sum_{i=1}^k x_i \textcolor{red}{<} \eta.
$$ Otherwise, accept the null hypothesis $H_0$ of no signal present.

```{r}

# number of MonteCarlo trials
repM <- 10000 

# Signal model
A = -1.5
k <- 10
s <- rep(A, k)
dat <- data.frame('n' = seq(1, k), 's' = s)

# Noise model
mu_w <- 0
var_w <- 2.5
sd_w <- sqrt(var_w)

#w <- rnorm(k, mean = mu_w, sd = sd_w)
#dat <- dat %>% bind_cols('w' = w)

# Signal + noise
#x <- s + rnorm(k, mean = mu_w, sd = sd_w)
#dat <- dat %>% bind_cols('x' = x)
#dat <- data.frame('n' = seq(1, k), 's' = s)


# Simulate H0 case repM times: estimate PF
test_statistic_h0 = NA
for(iM in 1:repM){
  w <- rnorm(k, mean = mu_w, sd = sd_w)
  test_statistic_h0[iM] <- mean(w)
}

# Simulate H1 case repM times: estimate PD
test_statistic_h1 = NA
for(iM in 1:repM){
  x <- A + rnorm(k, mean = mu_w, sd = sd_w)
  test_statistic_h1[iM] <- mean(x)
}

dat_sim <- 
  data.frame('test_statistic' = test_statistic_h0, 
             'label' = 'H0') %>% 
  bind_rows(data.frame('test_statistic' = test_statistic_h1, 
                       'label' = 'H1')) %>%
  mutate(
    A = A
  )

#write.csv(dat_sim, 'dat_sim_A_1.csv', row.names = F)

```

### Histogram of the test statistic given $H_0$ is true

```{r}
ggplot(data = dat_sim %>% filter(label == 'H0'), aes(x=test_statistic, fill = label)) + 
  geom_density(alpha = 0.4) 

```

### Detector threshold

Let us choose $\eta = \frac{A}{2}$.

```{r}
th <- A/2

ggplot(data = dat_sim %>% filter(label == 'H0'), aes(x=test_statistic, fill = label)) + 
  geom_density(alpha = 0.4) + 
  geom_vline(xintercept = th, linetype = 'dashed')

```

```{r}
pf_est <- sum(test_statistic_h0 < th)/repM
pf_est
```

```{r}
ggplot(data = dat_sim, aes(x=test_statistic, fill = label)) + 
  geom_density(alpha = 0.4) + 
  geom_vline(xintercept = th, linetype = 'dashed')

```

```{r}
pd_est <- sum(test_statistic_h1 < th)/repM
pd_est

```

### Receiver operating characteristic curve

-   Scan through all possible values of threshold

```{r}
aTh <- seq(-5, 5, by = 0.05)
PD_est <- NA
PF_est <- NA

for(i in 1:length(aTh)){
  th <- aTh[i]
  PD_est[i] <- sum(test_statistic_h1 < th)/repM
  PF_est[i] <- sum(test_statistic_h0 < th)/repM
}


dat_perf <- data.frame('th'=aTh, 'PF_est' = PF_est, 'PD_est' = PD_est)

ggplot(data = dat_perf,
       aes(x = PF_est, y = PD_est)) + 
  geom_line() + geom_point() +
  geom_abline(linetype = 'dashed') + 
  ggtitle('Receiver Operating Characteristic Curve') + 
  geom_vline(xintercept = 0.1, linetype = 'dashed', color = "blue")

```

### Threshold for $P_F \leq 0.1$

```{r}
dat_perf %>% dplyr::filter(PF_est <= 0.1) %>%
  dplyr::arrange(PF_est) %>%
  last()

```

I recommend to choose $\eta = -0.65$. Setting threshold to this value will maximize probability of detection while constraining $P_F$ to less than 0.1 (the given CTQ).
